/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/10 20:31:07 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/22 12:34:39 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

void	ft_error(char *error)
{
	write (2, "Error\n", 6);
	while (*error)
	{
		write(2, &(*error), 1);
		error++;
	}
	write (2, "\n", 1);
	exit (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   freing.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/11 04:36:46 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/26 09:02:57 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

void	ft_free_mlx_ptr(t_system *game)
{
	if (game->dup_dir)
		free(game->dup_dir);
	if (game->pos)
		free(game->pos);
}

void	ft_free_matrix(char **matrix)
{
	int	i;

	i = 0;
	if (matrix)
	{
		while (matrix[i])
		{
			if (matrix[i])
				free(matrix[i]);
			i++;
		}
		free(matrix);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/22 14:33:30 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/22 12:09:27 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

static size_t	ft_strlen1(const char *str)
{
	size_t	length;

	length = 0;
	while (*str)
	{
		length++;
		str++;
	}
	return (length);
}

static int	word_counter(const char *str, char c)
{
	int	flag;
	int	counter;

	flag = 0;
	counter = 0;
	while (*str)
	{
		if (*str != c && flag == 0)
		{
			counter++;
			flag = 1;
		}
		else if (*str == c)
			flag = 0;
		str++;
	}
	return (counter);
}

static char	*word_dup(const char *str, int start, int finish)
{
	int		i;
	char	*word;

	i = 0;
	word = (char *)malloc(sizeof(char) * ((finish - start) + 1));
	if (!word)
		return (NULL);
	while (start < finish)
	{
		word[i] = str[start];
		i++;
		start++;
	}
	word[i] = '\0';
	return (word);
}

static void	check(int num_w)
{
	if (!num_w)
		return ;
}

char	**ft_split(char const *str, char c)
{
	int		index;
	int		num_w;
	size_t	j;
	size_t	i;
	char	**split;

	num_w = word_counter(str, c);
	check(num_w);
	split = (char **)malloc(sizeof(char *) * (num_w + 1));
	i = 0;
	j = 0;
	index = -1;
	while (i <= ft_strlen1(str))
	{
		if (str[i] != c && index < 0)
			index = i;
		else if ((str[i] == c || i == ft_strlen1(str)) && index >= 0)
		{
			split[j++] = word_dup(str, index, i);
			index = -1;
		}
		i++;
	}
	split[j] = NULL;
	return (split);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_game_ready.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/10 09:10:01 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/22 12:19:12 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

char	*ft_spaces_in_color_line(char *line)
{
	int		i;
	int		j;
	int		flag;
	char	str[7000];

	i = 0;
	j = 0;
	flag = 0;
	while (line[i])
	{
		if (line[i] == ' ' && flag == 0)
		{
			str[j++] = line[i++];
			flag = 1;
		}
		else if (line[i] == ' ')
			i++;
		else
			str[j++] = line[i++];
	}
	str[j] = '\0';
	return (ft_strdup(str));
}

static void	condition_plus(t_system *game, int i)
{
	char	**matrix;

	matrix = ft_split(game->matrix_cd[i], ' ');
	if (ft_strncmp(game->matrix_cd[i], "NO ", 3) == 0)
		game->pos->north_texture = ft_strdup(matrix[1]);
	else if (ft_strncmp(game->matrix_cd[i], "WE ", 3) == 0)
		game->pos->west_texture = ft_strdup(matrix[1]);
	else if (ft_strncmp(game->matrix_cd[i], "EA ", 3) == 0)
		game->pos->east_texture = ft_strdup(matrix[1]);
	else if (ft_strncmp(game->matrix_cd[i], "SO ", 3) == 0)
		game->pos->south_texture = ft_strdup(matrix[1]);
	if (matrix)
		ft_free_matrix(matrix);
}

static void	ft_colors_and_textures(t_system *game, int i)
{
	char	*taker;
	char	**matrix1;

	while (game->matrix_cd[i] != NULL)
	{
		condition_plus(game, i);
		if (ft_strncmp(game->matrix_cd[i], "F ", 2) == 0)
		{
			taker = ft_spaces_in_color_line(game->matrix_cd[i]);
			matrix1 = ft_split(taker, ' ');
			free(taker);
			game->pos->floor = ft_strdup(matrix1[1]);
			ft_free_matrix(matrix1);
		}
		else if (ft_strncmp(game->matrix_cd[i], "C ", 2) == 0)
		{
			taker = ft_spaces_in_color_line(game->matrix_cd[i]);
			matrix1 = ft_split(taker, ' ');
			free(taker);
			game->pos->ceiling = ft_strdup(matrix1[1]);
			ft_free_matrix(matrix1);
		}
		i++;
	}
}

static int	ft_condition_here(char c)
{
	if (c == 'N' || c == 'S' || c == 'W' || c == 'E')
		return (1);
	return (0);
}

void	ft_get_game_ready(t_system *game)
{
	int	var[3];
	int	flag;

	flag = 0;
	ft_memset(var, 0, sizeof(var));
	while (game->map_matrix[var[0]])
	{
		var[1] = 0;
		while (game->map_matrix[var[0]][var[1]])
		{
			if (ft_condition_here(game->map_matrix[var[0]][var[1]]))
			{
				game->pos->x = var[0];
				game->pos->y = var[1];
				game->pos->looking_dir = game->map_matrix[var[0]][var[1]];
				flag = 1;
				break ;
			}
			var[1]++;
		}
		if (flag == 1)
			break ;
		var[0]++;
	}
	ft_colors_and_textures(game, var[2]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/21 16:47:48 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/08 09:55:17 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

char	*get_next_line(int fd)
{
	static char	taker[1];
	char		str[8000];
	static int	buffer_size;
	static int	buffer_position;
	int			i;

	i = 0;
	if (fd < 0)
		return (NULL);
	while (1)
	{
		if (buffer_position >= buffer_size)
		{
			buffer_size = read(fd, taker, 1);
			buffer_position = 0;
			if (buffer_size == 0)
				break ;
		}
		str[i++] = taker[buffer_position++];
		if (str[i - 1] == '\n')
			break ;
	}
	if (i == 0)
		return (NULL);
	return (str[i] = '\0', ft_strdup(str));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map0.5.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/03 10:46:03 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/22 12:11:55 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

int	ft_only_spaces(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (!(str[i] == ' ' || (str[i] >= 9 && str[i] <= 13)))
			return (1);
		i++;
	}
	return (0);
}

static int	condition(char *line, int i)
{
	if (((ft_strchr(line, 'N') != NULL || ft_strchr(line, 'O') != NULL
				|| ft_strchr(line, 'S') != NULL
				|| ft_strchr(line, 'E') != NULL
				|| ft_strchr(line, 'W') != NULL
				|| ft_strchr(line, 'A') != NULL)) && i < 6)
		return (1);
	return (0);
}

int	ft_condition(char *line, int flag, int i)
{
	if (flag)
	{
		if (condition(line, i))
			return (1);
		return (0);
	}
	else
	{
		if ((((ft_strchr(line, 'F') != NULL || ft_strchr(line, 'C') != NULL)
					&& (ft_strchr(line, '0') != NULL
						|| ft_strchr(line, '1') != NULL
						|| ft_strchr(line, '2') != NULL
						|| ft_strchr(line, '3') != NULL
						|| ft_strchr(line, '4') != NULL
						|| ft_strchr(line, '5') != NULL
						|| ft_strchr(line, '6') != NULL
						|| ft_strchr(line, '7') != NULL
						|| ft_strchr(line, '8') != NULL
						|| ft_strchr(line, '9') != NULL))) && i < 6)
			return (1);
		return (0);
	}
}

void	ft_handling_aux(t_system *game, int y, char *map)
{
	int		j;
	int		fd;
	char	*line;
	char	**buffer;

	buffer = malloc(sizeof(char *) * (y + 1));
	if (!buffer)
		ft_error("Something went wrong alocating buf1");
	j = 0;
	fd = open(map, O_RDONLY);
	if (fd < 0)
		ft_error("Failed to open the map file");
	line = get_next_line(fd);
	while (line != NULL)
	{
		buffer[j++] = line;
		line = get_next_line(fd);
	}
	buffer[j] = NULL;
	game->matrix = buffer;
	ft_more_function_calls(game);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map1.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/01 06:07:20 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/08 10:42:49 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

void	ft_free_resources(t_system *game, int flag)
{
	if (game->matrix)
		ft_free_matrix(game->matrix);
	if (game->matrix_cd)
		ft_free_matrix(game->matrix_cd);
	if (game->map_matrix)
		ft_free_matrix(game->map_matrix);
	ft_free_mlx_ptr(game);
	if (flag == 1)
		ft_error("Duplicated, missing, or more than one direction in the map");
	if (flag == 0)
		ft_error("Issue in the 6 first elements of the file");
}

void	ft_check_duplicated_dir_in_map(t_system *game)
{
	if (game->dup_dir->n_counter == 1 && (game->dup_dir->e_counter >= 1
			|| game->dup_dir->w_counter >= 1 || game->dup_dir->s_counter >= 1))
		ft_free_resources(game, 1);
	if (game->dup_dir->w_counter == 1 && (game->dup_dir->e_counter >= 1
			|| game->dup_dir->n_counter >= 1 || game->dup_dir->s_counter >= 1))
		ft_free_resources(game, 1);
	if (game->dup_dir->e_counter == 1 && (game->dup_dir->n_counter >= 1
			|| game->dup_dir->w_counter >= 1 || game->dup_dir->s_counter >= 1))
		ft_free_resources(game, 1);
	if (game->dup_dir->s_counter == 1 && (game->dup_dir->e_counter >= 1
			|| game->dup_dir->w_counter >= 1 || game->dup_dir->n_counter >= 1))
		ft_free_resources(game, 1);
	if (game->dup_dir->n_counter > 1 || game->dup_dir->w_counter > 1
		|| game->dup_dir->e_counter > 1 || game->dup_dir->s_counter > 1)
		ft_free_resources(game, 1);
	if (game->dup_dir->n_counter == 0 && game->dup_dir->w_counter == 0
		&& game->dup_dir->e_counter == 0 && game->dup_dir->s_counter == 0)
		ft_free_resources(game, 1);
}

void	ft_count_element_in_map(t_system *game)
{
	int	j;
	int	i;

	i = 0;
	while (game->map_matrix[i])
	{
		j = 0;
		while (game->map_matrix[i][j])
		{
			if (game->map_matrix[i][j] == 'W')
				game->dup_dir->w_counter++;
			else if (game->map_matrix[i][j] == 'S')
				game->dup_dir->s_counter++;
			else if (game->map_matrix[i][j] == 'N')
				game->dup_dir->n_counter++;
			else if (game->map_matrix[i][j] == 'E')
				game->dup_dir->e_counter++;
			j++;
		}
		i++;
	}
}

void	ft_if_duplicated_dir_or_color(t_system *game)
{
	if (game->dup_dir->no != 1 || game->dup_dir->so != 1
		|| game->dup_dir->we != 1
		|| game->dup_dir->ea != 1 || game->dup_dir->f_counter != 1
		|| game->dup_dir->c_counter != 1)
	{
		ft_free_matrix(game->matrix);
		ft_free_matrix(game->matrix_cd);
		ft_free_mlx_ptr(game);
		ft_error("Duplicated or missing direction or color component");
	}
}

void	ft_more_function_calls(t_system *game)
{
	ft_fill_color_dir_mat(game);
	ft_some_checks(game);
	ft_if_duplicated_dir_or_color(game);
	ft_fill_map_matrix(game);
	ft_count_element_in_map(game);
	ft_check_duplicated_dir_in_map(game);
	ft_check_slash_n(game);
	ft_get_rid_of_slash_n(game);
	ft_check_invalid_char(game);
	ft_check_ones(game);
	ft_get_game_ready(game);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map2.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/25 06:26:56 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/08 09:56:17 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

int	ft_count_lines_in_matrix(char **matrix)
{
	int	i;

	i = 0;
	while (matrix[i])
		i++;
	return (i);
}

int	string_comp(char *s1, char *s2)
{
	int	i;

	if (s1 == NULL || s2 == NULL)
		return (1);
	i = 0;
	while ((s1[i] != '\0' && s2[i] != '\0') && (s1[i] == s2[i]))
		i++;
	return (s1[i] - s2[i]);
}

int	ft_check_texture_extention(char *texture)
{
	int		j;
	int		len;
	char	*extention;

	len = 0;
	j = 0;
	extention = ".xpm";
	len = ft_strlen(texture);
	len = len - 4;
	while (texture[len] != '\0' && j < 4)
	{
		if (texture[len] != extention[j])
			return (1);
		j++;
		len++;
	}
	return (0);
}

static void	ft_count_direction(char *line, t_system *game)
{
	if (ft_strncmp(line, "NO ", 3) == 0)
		game->dup_dir->no++;
	else if (ft_strncmp(line, "EA ", 3) == 0)
		game->dup_dir->ea++;
	else if (ft_strncmp(line, "SO ", 3) == 0)
		game->dup_dir->so++;
	else if (ft_strncmp(line, "WE ", 3) == 0)
		game->dup_dir->we++;
}

void	ft_check_directions(char *line, char **matrix, t_system *game)
{
	if (ft_strncmp(line, "NO ", 3) != 0 && ft_strncmp(line, "EA ", 3) != 0
		&& ft_strncmp(line, "SO ", 3) != 0 && ft_strncmp(line, "WE ", 3) != 0)
	{
		ft_free_matrix(matrix);
		ft_free_matrix(game->matrix);
		ft_free_matrix(game->matrix_cd);
		ft_free_mlx_ptr(game);
		ft_error("Direction's misconfiguration in the map");
	}
	ft_count_direction(line, game);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map3.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/25 08:40:00 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/07 15:50:59 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

static int	ft_color_num(char *color_value)
{
	if ((ft_atoi(color_value) >= 0 && ft_atoi(color_value) <= 255)
		&& ft_atoi(color_value) != -999)
		return (0);
	return (1);
}

static void	ft_count_color_leter(char *str, t_system *game)
{
	if (ft_strncmp(str, "F", 2) == 0)
		game->dup_dir->f_counter++;
	else if (ft_strncmp(str, "C", 2) == 0)
		game->dup_dir->c_counter++;
}

static void	ft_free_here(t_system *game, char **matrix1, char **matrix2,
		int flag)
{
	if (flag == 1)
	{
		ft_free_matrix(matrix1);
		ft_free_matrix(game->matrix);
		ft_free_matrix(game->matrix_cd);
		ft_free_mlx_ptr(game);
		ft_error("Too many or less items in the color line");
	}
	else
	{
		ft_free_matrix(matrix1);
		ft_free_matrix(matrix2);
		ft_free_matrix(game->matrix);
		ft_free_matrix(game->matrix_cd);
		ft_free_mlx_ptr(game);
		if (flag == 2)
			ft_error("Color value has some essue, chack it out");
		ft_error("Too many or less number representing the colors");
	}
}

void	ft_validate_colors(char *line, t_system *game)
{
	char	**matrix1;
	char	**matrix2;

	line = ft_spaces_in_color_line(line);
	matrix1 = ft_split(line, ' ');
	if (ft_count_lines_in_matrix(matrix1) != 2)
		ft_free_here(game, matrix1, NULL, 1);
	if (ft_strncmp(matrix1[0], "F", 2) != 0 && ft_strncmp(matrix1[0], "C",
			2) != 0)
		ft_free_here(game, matrix1, NULL, 1);
	ft_count_color_leter(matrix1[0], game);
	matrix2 = ft_split(matrix1[1], ',');
	if (ft_count_lines_in_matrix(matrix2) != 3)
		ft_free_here(game, matrix1, matrix2, 0);
	if (ft_color_num(matrix2[0]) == 1 || ft_color_num(matrix2[1]) == 1
		|| ft_color_num(matrix2[2]) == 1)
		ft_free_here(game, matrix1, matrix2, 2);
	free(line);
	ft_free_matrix(matrix1);
	ft_free_matrix(matrix2);
}

void	ft_fill_color_dir_mat(t_system *game)
{
	int	i;
	int	counter;

	i = 0;
	counter = 0;
	game->matrix_cd = malloc(sizeof(char *) * 7);
	if (!game->matrix_cd)
		ft_error("Malloc matrix_cd failed");
	while (game->matrix[i])
	{
		if (ft_only_spaces(game->matrix[i]) != 0 && counter < 6)
			game->matrix_cd[counter++] = ft_strdup(game->matrix[i]);
		i++;
		if (counter >= 6)
			break ;
	}
	game->i = i;
	while (counter < 6)
		game->matrix_cd[counter++] = NULL;
	game->matrix_cd[counter++] = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map4.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/31 11:33:15 by mefernan          #+#    #+#             */
/*   Updated: 2025/02/22 13:58:47 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

static int	is_valid_char(char c)
{
	if (c != '1' && c != '0' && c != 'W'
		&& c != 'N' && c != 'E' && c != 'S'
		&& c != ' ' && c != 'x')
		return (1);
	return (0);
}

void	ft_check_invalid_char(t_system *game)
{
	int	i;
	int	j;

	i = 0;
	while (game->map_matrix[i])
	{
		j = 0;
		while (game->map_matrix[i][j])
		{
			if (is_valid_char(game->map_matrix[i][j]))
			{
				ft_free_matrix(game->matrix);
				ft_free_matrix(game->map_matrix);
				ft_free_matrix(game->matrix_cd);
				ft_free_mlx_ptr(game);
				ft_error("Invalid character in the map");
			}
			j++;
		}
		i++;
	}
}

static int	count_line(t_system *game)
{
	int	i;
	int	len;

	i = game->i;
	len = 0;
	while (game->matrix[i])
	{
		i++;
		len++;
	}
	return (len);
}

void	ft_fill_map_matrix(t_system *game)
{
	int	len;

	len = 0;
	while (game->matrix[game->i] != NULL
		&& ft_only_spaces(game->matrix[game->i]) == 0)
		game->i++;
	if (game->matrix[game->i] == NULL)
	{
		ft_free_matrix(game->matrix);
		ft_free_matrix(game->map_matrix);
		ft_free_matrix(game->matrix_cd);
		ft_free_mlx_ptr(game);
		ft_error("No map found");
	}
	len = count_line(game);
	game->map_matrix = malloc(sizeof(char *) * (len + 1));
	len = 0;
	while (game->matrix[game->i])
	{
		game->map_matrix[len] = ft_strdup(game->matrix[game->i]);
		len++;
		game->i++;
	}
	game->map_matrix[len] = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map5.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/03 09:21:27 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/14 23:11:02 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

int	ft_space(char c)
{
	if (c == ' ' || c == '\0')
		return (1);
	return (0);
}

static int	is_char_valide(char c)
{
	if (c == 'E' || c == 'N' || c == 'W' || c == 'S' || c == 'x')
		return (1);
	return (0);
}

static int	ft_double_slash_n(t_system *game)
{
	int	i;
	int	j;

	i = 0;
	while (game->map_matrix[i])
	{
		j = 0;
		while (game->map_matrix[i][j])
		{
			if (game->map_matrix[i][j] == '\n' && game->map_matrix[i][j
				+ 1] == '\0')
			{
				if (game->map_matrix[i + 1] != NULL)
					if (game->map_matrix[i + 1][0] == '\n'
						|| ft_only_spaces(game->map_matrix[i + 1]) == 0)
						return (1);
			}
			j++;
		}
		i++;
	}
	return (0);
}

void	ft_check_slash_n(t_system *game)
{
	if (ft_double_slash_n(game) == 1)
	{
		ft_free_resources(game, 0);
		ft_error("Tow or more slash n in the map");
	}
}

void	ft_check_ones(t_system *game)
{
	int	i;
	int	j;
	int	len1;

	i = 0;
	len1 = ft_count_lines_in_matrix(game->map_matrix);
	while (game->map_matrix[i] != NULL)
	{
		j = 0;
		while (game->map_matrix[i][j] != '\0')
		{
			if (game->map_matrix[i][j] == '0' && (i == 0 || i == len1 - 1))
				ft_print_error(game, 3);
			if (game->map_matrix[i][j] == '0' ||
				is_char_valide(game->map_matrix[i][j]))
			{
				if (j == 0 || j == (int)ft_strlen(game->map_matrix[i]) - 1)
					ft_print_error(game, 2);
				ft_conditions_for_zeros(game, i, j, len1);
			}
			j++;
		}
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/10 20:28:20 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/08 09:56:26 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

static char	*ft_take_out_slash_n(char *line)
{
	int	i;

	i = 0;
	while (line[i])
	{
		if (line[i] == '\n' && line[i + 1] == '\0')
			line[i] = '\0';
		i++;
	}
	return (line);
}

static void	ft_validate_direction(char *line, t_system *game)
{
	char	**matrix;

	matrix = ft_split(line, ' ');
	ft_check_directions(line, matrix, game);
	if (ft_count_lines_in_matrix(matrix) != 2)
	{
		ft_free_matrix(matrix);
		ft_free_resources(game, 0);
		ft_error("Misconfiguration in the file");
	}
	matrix[1] = ft_take_out_slash_n(matrix[1]);
	if (open(matrix[1], 0) < 0)
	{
		ft_free_matrix(matrix);
		ft_free_resources(game, 0);
		ft_error("Not a valid path for texture");
	}
	if (ft_check_texture_extention(matrix[1]) == 1)
	{
		ft_free_matrix(matrix);
		ft_free_resources(game, 0);
		ft_error("Texture's extention is misconfigurated");
	}
	ft_free_matrix(matrix);
}

void	ft_some_checks(t_system *game)
{
	int	var[3];

	ft_memset(var, 0, sizeof(var));
	while (game->matrix_cd[var[0]])
	{
		if (ft_condition(game->matrix_cd[var[0]], 1, var[0]))
		{
			ft_validate_direction(game->matrix_cd[var[0]], game);
			var[1]++;
		}
		else if (ft_condition(game->matrix_cd[var[0]], 0, var[0]))
		{
			ft_validate_colors(game->matrix_cd[var[0]], game);
			var[2]++;
		}
		else
		{
			if (var[2] != 2 && var[1] != 4 && var[0] < 6)
				ft_free_resources(game, 0);
		}
		var[0]++;
	}
	ft_if_duplicated_dir_or_color(game);
}

static void	ft_check_extention(t_system *game, char *map)
{
	int		i;
	int		len;
	char	*extention;

	i = 0;
	len = 0;
	extention = ".cub";
	len = ft_strlen(map);
	if (len < 4)
	{
		ft_free_mlx_ptr(game);
		ft_error("Map extention error");
	}
	len = len - 4;
	while (map[len] != 0)
	{
		if (map[len] != extention[i])
		{
			ft_free_mlx_ptr(game);
			ft_error("Map extention error");
		}
		i++;
		len++;
	}
}

void	ft_handling_map(t_system *game, char *map)
{
	int		j;
	int		fd;
	char	*line;

	j = 0;
	ft_check_extention(game, map);
	fd = open(map, O_RDONLY);
	if (fd < 0)
	{
		ft_free_mlx_ptr(game);
		ft_error("Failed to open the map file");
	}
	line = get_next_line(fd);
	while (line != NULL)
	{
		free(line);
		line = NULL;
		j++;
		line = get_next_line(fd);
	}
	close(fd);
	ft_handling_aux(game, j, map);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_map_helper.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/07 08:45:24 by mefernan          #+#    #+#             */
/*   Updated: 2025/03/14 23:07:06 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

void	ft_get_rid_of_slash_n(t_system *game)
{
	int	i;
	int	j;

	i = 0;
	while (game->map_matrix[i])
	{
		j = 0;
		while (game->map_matrix[i][j])
		{
			if (game->map_matrix[i][j] == '\n' && game->map_matrix[i][j
				+ 1] == '\0')
				game->map_matrix[i][j] = '\0';
			j++;
		}
		i++;
	}
}

void	ft_print_error(t_system *game, int flag)
{
	ft_free_matrix(game->matrix);
	ft_free_matrix(game->matrix_cd);
	ft_free_matrix(game->map_matrix);
	ft_free_mlx_ptr(game);
	if (flag == 1)
		ft_error("A zero has a space around it");
	if (flag == 2)
		ft_error("A zero or (N,W,S,E,x) is at one extreme of the map");
	if (flag == 3)
		ft_error("A zero is in the first or last line of the map");
}

static void	ft_erros(t_system *game, int i, int j, char *str)
{
	printf("[%d][%d]\n", i, j);
	printf("%s\n", str);
	ft_print_error(game, 1);
}

void	ft_conditions_for_zeros(t_system *game, int i, int j, int len1)
{
	if (j > 0 && ft_space(game->map_matrix[i][j - 1]))
		ft_erros(game, i, j, "[i][j - 1]");
	if (j < (int)ft_strlen(game->map_matrix[i]) - 1
		&& ft_space(game->map_matrix[i][j + 1]))
		ft_erros(game, i, j, "[i][j + 1]");
	if ((i < len1 - 1 && j < (int)ft_strlen(game->map_matrix[i + 1]))
		&& ft_space(game->map_matrix[i + 1][j]))
		ft_erros(game, i, j, "[i + 1][j]");
	else if (j >= (int)ft_strlen(game->map_matrix[i + 1]))
		ft_erros(game, i, j, "[i + 1][j]");
	if (i > 0 && ft_space(game->map_matrix[i - 1][j]))
		ft_erros(game, i, j, "[i - 1][j]");
	if ((i > 0 && j < (int)ft_strlen(game->map_matrix[i - 1]) - 1)
		&& ft_space(game->map_matrix[i - 1][j + 1]))
		ft_erros(game, i, j, "[i - 1][j + 1]");
	if ((i > 0 && j > 0) && ft_space(game->map_matrix[i - 1][j - 1]))
		ft_erros(game, i, j, "[i - 1][j - 1]");
	if ((i < len1 - 1 && j < (int)ft_strlen(game->map_matrix[i - 1]) - 1)
		&& ft_space(game->map_matrix[i + 1][j + 1]))
		ft_erros(game, i, j, "[i + 1][j + 1]");
	if ((i < len1 - 1 && j > 0) && ft_space(game->map_matrix[i + 1][j - 1]))
		ft_erros(game, i, j, "[i + 1][j - 1]");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.map.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/18 22:18:00 by xjose             #+#    #+#             */
/*   Updated: 2025/03/08 09:53:42 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../cub3D.h"

static void	ft_check_argc(int argc)
{
	if (argc != 2)
		ft_error("Wrong number of arguments");
}

static void	ft_initi_dup_pos(t_dup_dir *dup, t_pos *pos)
{
	dup->no = 0;
	dup->so = 0;
	dup->we = 0;
	dup->ea = 0;
	dup->w_counter = 0;
	dup->e_counter = 0;
	dup->n_counter = 0;
	dup->s_counter = 0;
	dup->c_counter = 0;
	dup->f_counter = 0;
	pos->x = 0;
	pos->y = 0;
	pos->north_texture = NULL;
	pos->south_texture = NULL;
	pos->west_texture = NULL;
	pos->east_texture = NULL;
}

static void	ft_init_structure(t_system *game)
{
	game->matrix = NULL;
	game->matrix = NULL;
	game->matrix_cd = NULL;
	game->map_matrix = NULL;
	game->i = 0;
	game->dup_dir->no = 0;
	game->dup_dir->so = 0;
	game->dup_dir->we = 0;
	game->dup_dir->ea = 0;
	game->dup_dir->f_counter = 0;
	game->dup_dir->f_counter = 0;
}

void	init_map(t_system *sys, int argc, char **argv)
{
	t_dup_dir	*dup;
	t_pos		*pos;

	ft_check_argc(argc);
	dup = malloc(sizeof(t_dup_dir));
	pos = malloc(sizeof(t_pos));
	ft_initi_dup_pos(dup, pos);
	sys->dup_dir = dup;
	sys->pos = pos;
	ft_init_structure(sys);
	ft_handling_map(sys, argv[1]);
	pos->floor[ft_strlen(pos->floor) - 1] = '\0';
	pos->ceiling[ft_strlen(pos->ceiling) - 1] = '\0';
	sys->map.floor_color = get_rgb(pos->floor);
	sys->map.ceiling_color = get_rgb(pos->ceiling);
	sys->map.looking_dir = pos->looking_dir;
	sys->map.matrix_map = sys->map_matrix;
	sys->map.size = 5;
	sys->map.color = WHITE;
}
